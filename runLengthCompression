'''
Given a string in the form 'AAAABBBBCCCCCDDEEEE' compress it to become 'A4B4C5D2E4'. 
For this problem, you can falsely "compress" strings of single or double letters. 
For instance, it is okay for 'AAB' to return 'A2B1' even though this technically takes more space.
The function should also be case sensitive, so that a string 'AAAaaa' returns 'A3a3'.
Algorithm:
    1) Iterate through the string looking at current value and previous value
    2) If different, put the previous value and count of occurrence
    3) If not different, increment counter of occurrence of current value
'''

s1 = 'AAAABBBBCCCCCDDEE'
#s1 = ''

def strCompress(s1):
    strLen = len(s1)
    #end cases
    if strLen == 0:
        return 0
    elif strLen == 1:
        return '1'+s1
    #Main Case
    else:
        #Initialize count and window to start looking at string to 1
        #since we will be comparing previous and current character
        cnt = i = 1
        #Emptry string to hold compressed string version
        r = ''
        while i < strLen:
            
            if (s1[i-1] == s1[i]):                
                cnt = cnt + 1
            else:
                r = r + str(cnt) + s1[i-1]
                cnt = 1
            i = i + 1
    r = r + str(cnt) + s1[i-1]
    return r
        
  
